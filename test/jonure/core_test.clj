(ns jonure.core-test
  (:require [clojure.test :refer :all]
            [jonure.crc :as crc]
            [jonure.packet :as packet]
            [jonure.core :refer :all]))

(deftest test-crc8
  (testing "crc8 computations"
    (is (=
          (crc/crc8-compute (byte-array (.getBytes "JONUREjonure")) 12)
          0x96))
    (is
      (=
        (crc/crc8-compute (byte-array (.getBytes "ABCDEFGHIJ")) 10)
        0x38))
    (is
      (=
        (crc/crc8-compute (byte-array (.getBytes "ABCDefghIJKLmnopQRSTuvwx")) 24)
        0xb8))))


(deftest test-crc32
  (testing "crc32 computations"
    (is (=
          (crc/crc32-compute (byte-array (.getBytes "JONUREjonure")) 2)
          2905401713))
    (is (=
          (crc/crc32-compute (byte-array (.getBytes "JONUREjonure")) 12)
          0x46a88110))
          ;1185448208))
    (is
      (=
        (crc/crc32-compute (byte-array (.getBytes "ABC\ufd10")) 4)
        0x9a135ac5))
    (is
      (=
        (crc/crc32-compute (byte-array (.getBytes "ABCDEFGHIJ")) 10)
        0x321e6d05))
        ;840854789))
    (is
      (=
        (crc/crc32-compute (byte-array (.getBytes "ABCDefghIJKLmnopQRSTuvwx")) 24)
        0xd3a12f3b))))
        ;3550555963))))



(def long-packet
  (byte-array
      [0x0A 0x66 0x01 0x16 0xE4 0x0B 0x18 0x02  0xAD 0x01 0x18 0x2E 0x04 0x00 0xB5 0x01
       0x7F 0x04 0x00 0x00 0xC2 0x0C 0xFA 0x01  0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x07
       0x08 0x09 0x0A 0x0B 0x0C 0x0D 0x0E 0x0F  0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17
       0x18 0x19 0x1A 0x1B 0x1C 0x1D 0x1E 0x1F  0x20 0x21 0x22 0x23 0x24 0x25 0x26 0x27
       0x28 0x29 0x2A 0x2B 0x2C 0x2D 0x2E 0x2F  0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37
       0x38 0x39 0x3A 0x3B 0x3C 0x3D 0x3E 0x3F  0x40 0x41 0x42 0x43 0x44 0x45 0x46 0x47
       0x48 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F  0x50 0x51 0x52 0x53 0x54 0x55 0x56 0x57
       0x58 0x59 0x5A 0x5B 0x5C 0x5D 0x5E 0x5F  0x60 0x61 0x62 0x63 0x64 0x65 0x66 0x67
       0x68 0x69 0x6A 0x6B 0x6C 0x6D 0x6E 0x6F  0x70 0x71 0x72 0x73 0x74 0x75 0x76 0x77
       0x78 0x79 0x7A 0x7B 0x7C 0x7D 0x7E 0x7F  0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87
       0x88 0x89 0x8A 0x8B 0x8C 0x8D 0x8E 0x8F  0x90 0x91 0x92 0x93 0x94 0xbb 0x2E 0x96 0x97
       0x98 0x99 0x9A 0x9B 0x9C 0x9D 0x9E 0x9F  0xA0 0xA1 0xA2 0xA3 0xA4 0xA5 0xA6 0xA7
       0xA8 0xA9 0xAA 0xAB 0xAC 0xAD 0xAE 0xAF  0xB0 0xB1 0xB2 0xB3 0xB4 0xB5 0xB6 0xB7
       0xB8 0xB9 0xBA 0xbb 0x00 0xBC 0xBD 0xBE 0xBF  0xC0 0xC1 0xC2 0xC3 0xC4 0xC5 0xC6 0xC7
       0xC8 0xC9 0xCA 0xCB 0xCC 0xCD 0xCE 0xCF  0xD0 0xD1 0xD2 0xD3 0xD4 0xD5 0xD6 0xD7
       0xD8 0xD9 0xDA 0xDB 0xDC 0xDD 0xDE 0xDF  0xE0 0xE1 0xE2 0xE3 0xE4 0xE5 0xE6 0xE7
       0xE8 0xE9 0xbb 0x51 0xEB 0xEC 0xED 0xEE 0xEF  0xF0 0xF1 0xF2 0xF3 0xF4 0xF5 0xF6 0xF7
       0xF8 0xF9 0xE1 0x55 0x1E 0xBA]))


(def med-packet
 (byte-array
     [0x0A 0x26 0x4C 0xFA 0x0B 0x18 0x02 0xAD  0x01 0x18 0x2E 0x04 0x00 0xB5 0x01 0xF9
       0x02 0x00 0x00 0xC2 0x0C 0x32 0x46 0x46  0x46 0x46 0x46 0x46 0x46 0x46 0x46 0x46
       0x46 0x46 0x46 0x46 0x46 0x46 0x46 0x46  0x46 0x46 0x46 0x46 0x46 0x46 0x46 0x46
       0x46 0x46 0x46 0x46 0x46 0x46 0x46 0x46  0x46 0x46 0x46 0x46 0x46 0x46 0x46 0x46
       0x46 0x46 0x46 0x46 0x46 0x46 0x46 0x46  0xB6 0xCE 0x61 0xF3]))


(def short-packet
  (byte-array
      [0x0A 0x26 0x1E 0x32 0x0B 0x18 0x02 0xAD  0x01 0x18 0x2E 0x04 0x00 0xB5 0x01 0x9D
       0x04 0x00 0x00 0xC2 0x0C 0x04 0x0A 0xC5  0xFB 0x5B 0xDB 0xB6 0x25 0x5E]))

(deftest test-packet-crc-long-length
  (let [packet (packet/parse-packet long-packet)]
    (testing "packet computations on long packet"
      (is
        (=
          (:packet-crc-ok packet)
          true))
      (is
        (=
          (:ext-length packet)
          true))
      (is
        (=
          (:header-crc-ok packet)
          true)))))

(deftest test-packet-crc-med-length
  (let [packet (packet/parse-packet med-packet)]
    (testing "packet computations on med packet"
      (is
        (=
          (:packet-crc-ok packet)
          true))
      (is
        (=
          (:ext-length packet)
          false))
      (is
        (=
          (:header-crc-ok packet)
          true)))))

(deftest test-packet-crc-short-length
  (let [packet (packet/parse-packet short-packet)]
    (testing "packet computations on shorter packet"
        (is
          (=
            (:packet-crc-ok packet)
            true))
        (is
          (=
            (:ext-length packet)
            false))
        (is
          (=
            (:header-crc-ok packet)
            true)))))

(deftest test-header-crc
  (testing "header crc"
    (is
      (=
        (crc/crc8-compute (byte-array [0x0A 0x26 0x4C]))
        0xFA))
    (is
       (=
         (crc/crc32-compute med-packet 72)
         3066978803))))


(deftest test-full-crcs
  (let [full (byte-array (range 256))]
    (is (=
          (crc/crc32-compute full)
          0x29058c73))
    (is (=
          (crc/crc8-compute full)
          0x2e))))




(def packet-with-id
  (byte-array
      [0x0A 0xA6 0x20 0xC1 0x0B 0x13 0xEF  0x18 0x02 0xAD 0x01 0x18 0x2E 0x04 0x00 0xB5
       0x01 0xC7 0x02 0x00 0x00 0xC2 0x0C  0x04 0x50 0x14 0xFD 0x5B 0x75 0x4A 0x88 0x6F]))


(deftest test-packet-id
  (let [packet (packet/parse-packet packet-with-id)]
    (testing "test packet id"
      (is
        (=
          (:packet-crc-ok packet)
          true))
      (is
        (=
          (:packet-id packet)
          0xAD01))
      (is
        (=
          (:header-crc-ok packet)
          true)))))





(def test-0-packet (byte-array [0x67 0xF0 0x01 0x79 0xF7 0x2E 0x18 0x72 0x3B 0xDE 0xF0 0xA8 0x2D 0x29 0x51 0x0A 0xFC 0x1A 0xEC 0xD7 0x55 0xEF 0xA7 0x51 0xFB 0x82 0x42 0xB2 0xC2 0x33 0x48 0x84 0x67 0x3C 0xF0 0x42 0x2F 0xAA 0x8F 0x8E 0x96 0x93 0xFA 0xEB 0xAD 0x2A 0x2E 0x3D 0x29 0x94 0xAC 0x30 0xE7 0x7D 0x53 0x39 0xE7 0x4A 0x6F 0xF4 0xD7 0x70 0xAD 0xD2 0x54 0x8B 0xC4 0x61 0xDD 0xBB 0x51 0xCB 0xCD 0x38 0x0D 0x16 0x4A 0x7E 0x42 0x8E 0x11 0xC2 0x94 0xE5 0x03 0xB1 0x47 0x91 0x9D 0x10 0xFD 0x47 0x6F 0xE5 0xF1 0xE2 0x48 0xBE 0xF9 0xB4 0x38 0x4A 0x66 0xC8 0x5D 0x2E 0x08 0x51 0x6E 0x63 0xC5 0xC7 0x01 0x7D 0x61 0x49 0xE3 0x0E 0x73 0xFD 0x8A 0x86 0xAC 0x91 0x87 0xF2 0x05 0xA0 0xDC 0x78 0xA7 0x83 0x13 0xCE 0x2B 0x70 0x97 0x53 0x0A 0x04 0x70 0x1E 0x6D 0xA0 0x98 0x93 0x6D 0xFC 0xDE 0x4A 0xC5 0xDA 0xE7 0x9C 0xBF 0x6A 0x1F 0x64 0xB2 0x6D 0x2D 0x42 0x01 0x54 0xDF 0x0F 0xD9 0xF6 0x6E 0xF0 0x74 0xC9 0x33 0x75 0x5E 0xFE 0x6A 0x05 0xE4 0xE2 0x8A 0xE6 0x26 0x5E 0x13 0x83 0x45 0xFC 0x6A 0xDE 0xDC 0x7C 0x73 0x97 0x8C 0xA5 0xBB 0x51 0xFC 0x0C 0x39 0xA0 0x91 0x25 0xA5 0xB2 0x85 0xCD 0x43 0x34 0x09 0xB4 0xF8 0x9B 0x27 0x51 0x1A 0x53 0xA6 0xCC 0x8C 0x1C 0xEC 0xF0 0xED 0x77 0x4D 0x22 0xD7 0xA8 0x6D 0x29 0x6F 0x4A 0x8C 0x8E 0x05 0xC4 0xA1 0x76 0x03 0xC2 0x62 0x1B 0x4F 0xEC 0x2D 0xB7 0x01 0x94 0x93 0x60 0x0F 0x2C 0x33 0x6D 0x0A 0xB7 0xF3 0x47 0xC7 0x55 0xF4 0x55 0x58 0xC4 0x81 0x5A 0x50 0x70 0x13 0xB6 0x24 0x07 0x35 0x37 0x5E 0x1A 0x21 0x82 0xED 0x32 0xB6 0x5E 0xF7 0xAF 0x5B 0xB6 0x4B 0x0E 0x48 0x03 0x4C 0x1D 0x6C 0x96 0x91 0x67 0xCF 0x1D 0x7A 0xDF 0x92 0x33 0x50 0x35 0x39 0x6D 0xBE 0x8D 0x7E 0x15 0x51 0x5D 0x2A 0xE7 0x27 0xA0 0x1E 0xC0 0x4B 0x03 0xC5 0x7B 0xE2 0x40 0x79 0x26 0xD9 0x52 0x39 0x7B 0x22 0xC9 0x8F 0x50 0x6B 0xD9 0x86 0x16 0xED 0x35 0xCD 0xDD 0x15 0x13 0x36 0x65 0xAF 0x15 0xF0 0x54 0x8F 0xD8 0x99 0xD9 0x75 0x97 0x60 0xDB 0x69 0x8B 0x7B 0x66 0x32 0x64 0xD9 0x87 0xF9 0x99 0x20 0x8A 0x39 0x11 0x17 0x23 0x73 0x8E 0x5D]))
(deftest test-test-0
  (let [packet (packet/parse-packet test-0-packet)]
    (testing "test-0"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 13))
      (is (= (:dest-id packet) 103))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 161)))
      (is (= (:port packet) 29243))
      (is (= (:data-len packet) 364)))))





(def test-1-packet (byte-array [0xE8 0x20 0x7C 0xA3 0xD4 0x66 0x0D 0x5C 0x7E 0x88 0x77 0xF4 0x21 0xF2 0xB1 0x72 0x81 0x88 0x26 0x3F 0xCF 0x0A 0x88 0x29 0xA3 0xE9 0x33 0x39 0xA4 0x22 0x56 0xF5 0xA5 0x4A 0x2A 0xCC 0xE6 0x4D 0x87 0x09 0x54 0x9A 0x34 0x84 0x1D 0x0A 0x38 0x57 0x7D 0x5D 0x35 0xE3 0xF2 0x3D 0x43 0xEB 0xE6 0x1B 0xF9 0x22 0x43 0x39 0x27 0xF2 0x70 0x10 0x0D 0x1E 0x24 0x47 0x79 0x53 0x5F 0xD2 0xE5 0xEB 0x96 0x08 0xFD 0xB1 0x3A 0x15 0x59 0x4D 0xBC 0xFC 0xB5 0xFB 0x60 0x05 0x7F 0xC0 0x1C 0xC5 0x07 0xBA 0xCA 0x06 0x07 0xF2 0xBD 0x26 0xB0 0x33 0x57 0xD2 0xDE 0xC9 0x05 0xD9 0x32 0x90 0x0B 0xCB 0x73 0x23 0x8F 0x06 0x8A 0x39 0x98 0x00 0x84 0xD2]))
(deftest test-test-1
  (let [packet (packet/parse-packet test-1-packet)]
    (testing "test-1"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 8))
      (is (= (:dest-id packet) 232))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 31)))
      (is (= (:port packet) false))
      (is (= (:data-len packet) 116)))))





(def test-2-packet (byte-array [0x38 0x6E 0x01 0xEE 0x10 0x5E 0x5D 0xB2 0x0B 0xAE 0x2C 0x6A 0x6B 0xA2 0x2A 0x56 0xFE 0xA5 0x0F 0xF8 0x47 0xBA 0x0E 0xCB 0x0F 0x65 0x96 0x1E 0x8C 0x16 0xC2 0xBB 0x51 0xF3 0x65 0xCB 0x09 0x29 0x6B 0x0D 0x0B 0x63 0x1D 0x4C 0x61 0xA5 0xC7 0xD4 0xA7 0x2F 0x64 0x19 0x69 0x93 0x73 0xD1 0x7E 0xD1 0xB1 0x4E 0x79 0x2A 0xE8 0x48 0xAA 0x8B 0x67 0x22 0xAC 0xE8 0xFB 0x33 0xDB 0xAC 0x16 0x35 0x50 0x56 0xEE 0x32 0x44 0x19 0x64 0x16 0x25 0x50 0xBB 0x00 0x15 0xF5 0xCE 0x16 0xC2 0xD6 0x98 0xC5 0x2B 0xBB 0x2E 0x1C 0xB3 0xD8 0xCA 0xF2 0xA9 0x90 0xD3 0xA1 0xCF 0xAF 0x49 0x64 0x8F 0xB1 0x46 0x75 0xBB 0x2E 0x2B 0x0F 0x02 0xB6 0x1F 0x98 0xF1 0x6D 0x1A 0x0E 0xA3 0xFB 0xC5 0xC8 0x81 0xDA 0xD2 0x55 0xCF 0xED 0xCC 0x4B 0xD7 0xD2 0xA2 0x65 0xC8 0xB2 0x1D 0x1F 0x8E 0xCE 0xEC 0xCF 0x47 0xBE 0x3E 0x03 0xE7 0xB9 0xBD 0xDB 0x8B 0x82 0xF4 0x3D 0xDE 0x42 0x8C 0x3C 0x98 0x90 0xB7 0x82 0x31 0x8C 0xD9 0x60 0x06 0x86 0xB8 0x28 0x62 0xF7 0xD8 0x23 0xB8 0x2C 0x8D 0x91 0xBE 0x81 0xE7 0xD7 0xE6 0x98 0xDF 0xCE 0x14 0x47 0xC9 0xD5 0x20 0xF4 0xBB 0x00 0xFD 0xCA 0x44 0xBB 0x51 0x1A 0x79 0x7B 0x01 0xD7 0x44 0x08 0xED 0xD7 0xFF 0x23 0x1B 0x94 0x7B 0x9C 0x78 0x1D 0x14 0x41 0x6F 0xD3 0xC2 0x10 0x09 0x0A 0x3B 0x40 0x0D 0xAE 0x40 0x5A 0xFC 0x08 0xEE 0xA7 0x05 0xBF 0x71 0x64 0x01 0xCB 0xD9 0x68 0xD9 0xA7 0x49 0x0F 0x5D 0x27 0xD5 0x7F 0x04 0xB0 0x5E 0xC1 0x06 0x65 0x74 0xBC 0xDD 0x77 0x0A 0x57 0x52 0x0C 0xE9 0x7A 0x57 0xC6 0x70 0xEC 0xE7 0xF7 0x20 0x9D 0xEB 0x9A 0xFC 0xB5 0xD4 0xD3 0xC8 0xFF 0xDB 0x6A 0x5D 0xF5 0x62 0x35 0xFD 0xA6 0x8A 0xCE 0xE0 0xEC 0x03 0xC4 0x6E 0x01 0x40 0xB2 0x10 0xD9 0x1D 0xC0 0xF7 0xF0 0xA9 0xE0 0x8A 0x7A 0x4F 0xF4 0x7E 0xF2 0x17 0x98 0x8C 0x40 0xC2 0x51 0x4B 0xD7 0x5E 0x82 0x6E 0xBF 0x52 0x46 0xC3 0x4B 0xCB 0x0A 0x71 0x9C 0x0B 0xB0 0xEE 0xEE 0xB3 0xFA 0x2C 0x64 0x64 0xFD 0xBC 0xBB 0x2E 0x83 0x8E 0xDB 0xE6 0xDD 0xBB 0x00 0x6C 0x00 0xB7 0x3B 0x7D 0x0B 0x8E 0x9A 0x5A 0xB0 0x3E 0x48 0x7F 0xF2 0xAB 0x50 0x2A 0x11 0x08 0x9C 0xDB 0xDC 0x32 0xB3 0x12 0xC9 0xE6 0x54 0xFB 0x9F 0x4E 0x3E 0x8A 0x86 0x7F 0x8D 0x96 0x46 0xF3 0xF0 0xCF 0x77 0x2A 0x9B 0x79 0x38 0xB1 0xD4 0x5A 0x69 0x08 0xFF 0xAC 0xBB 0x51 0x88 0x83 0xC8 0xA9 0x82 0xA2 0x74 0xE9 0x46 0x96 0x69 0x56 0x52 0x0A 0xA1 0x1F 0xBB 0x2E 0x1D 0xC7 0x7F 0xF7 0x02 0x02 0xC5 0xBB 0x00 0xBB 0x51 0xF4 0xD8 0xDE 0x3A 0x8A 0x59 0xB2 0xBA 0xFE 0x02 0xB1 0xFD 0xD7 0xA8 0xDF 0xED 0xCD 0x5E 0x54 0x48 0x3C 0x7D 0x3C 0x96 0x42 0xFA 0xDC 0x8A 0xBB 0x00 0x61 0xFD 0x4C 0xF0 0x5C 0xF3 0x86 0x85 0x8E 0xD4 0xFF 0x61 0xF7 0xBA 0xC0 0x86 0xAE 0xA5 0x84 0x64 0x78 0x70 0x0A 0xBF 0xD0 0xF7 0x00 0xBD 0xD7]))
(deftest test-test-2
  (let [packet (packet/parse-packet test-2-packet)]
    (testing "test-2"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 12))
      (is (= (:dest-id packet) 56))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 94)))
      (is (= (:port packet) false))
      (is (= (:data-len packet) 482)))))





(def test-3-packet (byte-array [0x81 0xB6 0xDC 0x2E 0x8B 0x49 0x30 0x36 0x2D 0x01 0xAA 0x49 0x10 0xF7 0x48 0xD5 0x15 0x69 0x58 0x16 0x92 0x06 0x58 0x1C 0x01 0x57 0x93 0x63 0x68 0x70 0xEC 0xCC 0xC3 0xB8 0x1C 0xA9 0x78 0xCF 0x44 0x0F 0x61 0xBB 0x00 0xD8 0x8F 0x05 0x8B 0x23 0x9E 0xC4 0x12 0x85 0x5A 0xA7 0x60 0xEB 0x80 0x88 0xD2 0x6C 0x96 0x26 0xD7 0x3C 0xC3 0x1F 0x3F 0x03 0xDD 0xEC 0x5D 0x72 0x2A 0xE8 0x2E 0xF6 0x39 0x77 0xC6 0x07 0xEC 0x16 0xBB 0x51 0x21 0x2B 0x7D 0x44 0xA8 0x73 0xC9 0xF1 0x75 0xF7 0x1B 0xA1 0x44 0x07 0x52 0x7F 0x18 0x1A 0xFF 0x1F 0xBA 0x0F 0xAF 0xFE 0xEE 0x02 0xD4 0xC4 0xDE 0xFC 0x6C 0x61 0xF6 0x60 0xF0 0x96 0xBE 0x54 0x4B 0x64 0x3A 0x0C 0x0C 0xEE 0xE7 0xC6 0x4D 0xFF 0x4B 0x30 0xC7 0xB3 0xCD 0x39 0xF8 0x26 0x85 0xBB 0x51 0x54 0x9F 0xC4 0xC7 0x08 0xDE 0x42 0xF7 0x41 0x35 0x97 0xF9 0x75 0x47 0xE5 0x4E 0x7D 0x67 0x21 0x57 0xC0 0xD3 0x58 0xB9 0xC8 0x6E 0x4C 0x2F 0x6A 0xD0 0x85 0x46 0x9A 0x68 0x78 0x5A 0x6E 0x29 0x7F 0x4C 0xBB 0x00 0xAD 0xBB 0x00 0x51 0x4E 0x2F 0xE6 0x50 0xB6 0x85 0xBA 0x18 0x92 0x16 0x45 0x8A 0xBC 0x1E 0xC6 0xB8 0xE2 0x55 0x11 0x98 0x36 0xC7 0x44 0xA9 0xFF 0xFA 0x30 0x80 0x91 0xAC 0x82 0xF6 0xD1 0xB0 0x98 0xE5]))
(deftest test-test-3
  (let [packet (packet/parse-packet test-3-packet)]
    (testing "test-3"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 13))
      (is (= (:dest-id packet) 129))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 139)))
      (is (= (:port packet) 13869))
      (is (= (:data-len packet) 207)))))





(def test-4-packet (byte-array [0xA9 0x72 0x01 0x9B 0x33 0x44 0x11 0xA5 0x37 0x98 0x53 0x68 0xCC 0x00 0xF5 0x19 0xAE 0xB3 0x42 0x6B 0xA9 0x8C 0xAC 0xC6 0x40 0x01 0x59 0x16 0xF8 0x61 0x8F 0x70 0x9F 0x1C 0x66 0x4F 0xCD 0x70 0x70 0x56 0xD5 0xBB 0x51 0x97 0xF2 0x1B 0x30 0x50 0x6C 0xA6 0xD4 0x2C 0x7A 0x0B 0xD5 0xC8 0xD6 0x6F 0xD0 0x54 0x2C 0x3A 0xBB 0x2E 0x6E 0x50 0x97 0xE6 0xD0 0x70 0xF5 0x9F 0x98 0xBA 0x1E 0x6C 0xE0 0x1C 0x49 0x6D 0xCE 0x7D 0x59 0x93 0x6F 0x85 0x70 0xF8 0x1B 0xCE 0x4E 0x30 0xB4 0x91 0x94 0x4D 0xA1 0xD4 0x64 0x39 0xED 0x29 0x26 0x78 0xAC 0xBF 0xA3 0x2E 0x40 0xD0 0xDE 0xD6 0x8D 0x08 0xF0 0x38 0xF8 0x54 0x5B 0x54 0x29 0x4F 0xA9 0xCC 0xCB 0x3C 0x24 0x88 0xA5 0x46 0xF5 0x0C 0xE7 0x61 0x13 0x8F 0x21 0x79 0xE3 0x6D 0xFE 0xE9 0x55 0xFC 0x3B 0x27 0xBA 0x18 0x37 0x1F 0xB6 0x57 0xF2 0x06 0xFF 0x30 0xBB 0x00 0xE0 0x10 0x35 0x74 0x69 0xDE 0x6B 0xFE 0x02 0x4F 0xE5 0x9C 0xBC 0xDC 0x5C 0x2D 0x72 0x52 0xC4 0x53 0x61 0xBB 0x2E 0xEF 0xDC 0x6C 0xF7 0xB1 0x17 0x5A 0x22 0x98 0x93 0x55 0x04 0x20 0xF0 0x25 0x02 0x60 0x46 0x64 0xD1 0xDA 0x7E 0x98 0x45 0x96 0x46 0xBA 0x56 0x12 0x5B 0x77 0x58 0xB2 0xC5 0x3C 0xB1 0x81 0x1C 0x6A 0x5C 0x1C 0x32 0x69 0x64 0xE3 0x84 0xDB 0x28 0xDA 0x4F 0xC1 0x6D 0xDF 0x72 0x5D 0x03 0xC2 0x04 0x98 0x29 0xD7 0x2C 0x31 0x91 0x57 0xD5 0xE9 0xEE 0x47 0xE2 0xCC 0x38 0xCC 0xD4 0x92 0x4B 0x77 0x03 0x41 0xD6 0x7A 0x97 0xB1 0xF1 0x5E 0xA5 0x0C 0x50 0x29 0xA6 0x4D 0x28 0x45 0x29 0x8E 0xDE 0x4E 0x1C 0x2C 0x9F 0x09 0xE8 0x1B 0xAF 0x49 0xB6 0xF2 0x00 0x54 0x0D 0x6F 0x59 0x1C 0x40 0x92 0xEF 0x8B 0x04 0x0C 0xD2 0xBA 0x32 0xF6 0x14 0xEE 0x2F 0xB1 0x75 0x78 0xAC 0x67 0x13 0x54 0x49 0xE1 0x96 0x18 0xEB 0xF4 0x33 0xE6 0xEB 0x41 0x8F 0x1D 0x03 0x68 0x16 0x57 0x24 0x80 0xD7 0xC3 0x12 0x80 0x91 0x6C 0x55 0xA0 0x49 0xCE 0xEF 0x39 0x45 0x8C 0x31 0xAB 0x31 0x93 0x8C 0x11 0xFD 0x13 0x01 0xA9 0x86 0x4A 0x53 0x26 0xE5 0x7B 0xD1 0xB8 0x25 0xC6 0x2D 0xBB 0x2E 0xC1 0x90 0xDD 0xBD 0xBB 0x2E 0xBA 0xC9 0x02 0xC6 0x87 0x5C 0x13 0x19 0xC4 0x8F 0x5E 0x7B 0xBD 0xCB 0x44 0xC6 0x0B 0x0A 0x81 0x0C 0xD4 0x37 0xFB 0x50 0x11 0xB5 0x4F 0x20 0x84 0x80 0x66 0x96 0x19 0xE2 0xBB 0x2E 0x33 0x9A 0x12 0x4C 0x80 0xB6 0xE7]))
(deftest test-test-4
  (let [packet (packet/parse-packet test-4-packet)]
    (testing "test-4"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 12))
      (is (= (:dest-id packet) 169))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 68)))
      (is (= (:port packet) 4517))
      (is (= (:data-len packet) 399)))))





(def test-5-packet (byte-array [0x4A 0x2A 0x90 0x03 0x4E 0x42 0xDA 0x53 0x89 0xF9 0x48 0x73 0xBA 0x46 0x76 0xAD 0x33 0x49 0x56 0xE9 0x2F 0x59 0x07 0x8A 0xBB 0x51 0x15 0x15 0x34 0x16 0x99 0x93 0x34 0x59 0xCF 0xE3 0xDA 0x4E 0x08 0x23 0xBB 0x2E 0xF7 0x1C 0x80 0x45 0xA6 0xA9 0x41 0xA5 0xCE 0x3C 0x12 0xD2 0x94 0x9B 0x7D 0x3A 0x01 0x4A 0x52 0xDB 0x6F 0x78 0x2C 0x0A 0x98 0xE6 0xED 0xF3 0x79 0x05 0x27 0x4E 0xC1 0x7A 0x46 0x1D 0xC3 0x92 0xED 0x34 0xBF 0xEF 0x29 0x47 0x16 0x5B 0x23 0x37 0xC2 0x2D 0xAC 0x41 0x3C 0xEB 0xE6 0x59 0x17 0xDE 0x8D 0x2E 0xEC 0x27 0xB6 0x98 0x71 0xF6 0xEF 0xF3 0x23 0x9F 0xBC 0xF9 0x68 0x06 0x83 0x14 0xB4 0x84 0x77 0x01 0x03 0xB2 0x00 0x0B 0xA9 0x00 0x03 0xAC 0x9E 0xE9 0x51 0x37 0xE9 0xFE 0x61 0x91 0xD6 0xA7 0xF4 0xDE 0xB4 0x10 0xF3 0xBB 0x51]))
(deftest test-test-5
  (let [packet (packet/parse-packet test-5-packet)]
    (testing "test-5"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 11))
      (is (= (:dest-id packet) 74))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 78)))
      (is (= (:port packet) false))
      (is (= (:data-len packet) 133)))))





(def test-6-packet (byte-array [0x54 0xEC 0x01 0x9D 0x84 0xA0 0x0B 0x56 0x1E 0x07 0xF7 0x0B 0x93 0xB9 0x1D 0xA8 0x07 0x8A 0xD2 0xCC 0x4F 0xAB 0x08 0xB3 0xCA 0xE9 0x96 0x81 0x0F 0x69 0x21 0xBD 0x4E 0xBF 0xE0 0x02 0x22 0xE5 0x04 0x3E 0xB7 0x72 0x04 0x0B 0x18 0x5D 0x79 0xFF 0x2A 0xF8 0x3B 0x94 0xA5 0xB3 0xA6 0x50 0xE5 0xA8 0x4A 0xC4 0x04 0xC8 0xA2 0x4F 0xEC 0x68 0xD1 0x9B 0x97 0x22 0x89 0x33 0x20 0xDE 0x2C 0x74 0xEF 0x3F 0x29 0xB8 0x5E 0x23 0x0F 0x8C 0xA4 0x89 0x4D 0x27 0x0A 0x6D 0xAA 0xFE 0xB2 0xB7 0x6E 0x60 0x64 0x5F 0xF7 0xCC 0x3A 0xAF 0x1D 0xFD 0xC4 0x99 0xD3 0xFA 0x20 0x73 0x5E 0xB5 0xBE 0x91 0x34 0x8B 0x2A 0xFA 0xBE 0x66 0xB1 0x03 0x7E 0x23 0xED 0xBE 0x3B 0x8E 0xF5 0x2E 0x3A 0x86 0x2F 0xE8 0x34 0x87 0x13 0x59 0x2B 0xDC 0xDF 0x3B 0xD1 0x24 0x5F 0x2F 0x81 0xF4 0x3A 0xAB 0x26 0x61 0x23 0x41 0xF3 0x54 0x6D 0x3B 0xBE 0x29 0x0C 0xE3 0x16 0x3B 0x6F 0xE7 0x0C 0x15 0xB5 0x4E 0x0F 0x39 0x1B 0xE4 0x6C 0x49 0x57 0xFB 0x21 0x31 0x8E 0x71 0x63 0x47 0xF8 0x82 0x88 0xD9 0x0E 0x81 0xC9 0xEC 0x1C 0x9D 0x58 0xD8 0xEE 0x7B 0xA2 0x6D 0x93 0xAC 0x05 0xCB 0x9B 0x94 0x4A 0xB3 0xDC 0x48 0x4A 0x37 0xD1 0xEF 0x01 0x2A 0xF3 0x32 0xA9 0xA9 0xD1 0x62 0x72 0x44 0x6A 0x38 0x63 0x56 0x03 0x1C 0xC3 0x93 0x93 0x22 0x10 0x81 0xE8 0x72 0xE0 0xBA 0xA2 0xC4 0xFB 0x91 0xAC 0xD7 0xDF 0x7F 0x97 0x0D 0x37 0xF3 0x80 0x20 0x7D 0xF3 0xE9 0x2C 0x45 0x73 0x32 0x7E 0xEB 0x67 0x88 0x9B 0x8F 0x72 0xD9 0x8C 0xD4 0xDA 0xA0 0x7C 0x80 0xE1 0x03 0xE6 0x27 0x89 0x21 0xBB 0x00 0xE7 0xE6 0x15 0xB4 0x9D 0x1C 0x8C 0x35 0x30 0x34 0xD6 0x04 0xE5 0x3A 0x80 0xFB 0x97 0xF2 0x1A 0xB8 0x32 0x88 0xCF 0xA2 0x6B 0x93 0xFB 0xBD 0xBE 0x9B 0xC9 0x09 0x08 0x06 0x14 0xE4 0x38 0xBD 0x2D 0xEE 0xDD 0xE3 0xD5 0x6D 0x02 0x32 0xAA 0x84 0x3A 0x59 0xC8 0x10 0x71 0xCF 0x20 0x63 0x1D 0x76 0x47 0x0D 0xD6 0x5D 0xB9 0x02 0x1B 0x2C 0xC5 0x70 0xED 0xBB 0x51 0x0C 0xB5 0xD1 0x16 0x40 0xE5 0xAE 0x3F 0x6C 0xD2 0xE1 0xE0 0xBC 0xC4 0x79 0xC9 0x4E 0x4D 0xEF 0x76 0x9E 0x8C 0x72 0xCF 0xD2 0x79 0xAA 0xB5 0xE2 0xB5 0x71 0x08 0x09 0xAB 0x3A 0xE1 0x6C 0xED 0xF1 0x39 0x8F 0xA3 0x78 0x3C 0x1B 0x69 0x36 0x0B 0xF2 0xD7 0xBC 0x1A 0x1F 0x8B 0x87 0x11 0xC2 0xC4 0x76 0xFC 0xCC]))
(deftest test-test-6
  (let [packet (packet/parse-packet test-6-packet)]
    (testing "test-6"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 11))
      (is (= (:dest-id packet) 84))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 248)))
      (is (= (:port packet) false))
      (is (= (:data-len packet) 402)))))





(def test-7-packet (byte-array [0xCF 0x2A 0x82 0x9B 0x18 0x28 0x44 0x69 0x02 0x39 0x80 0x02 0x82 0xFC 0x26 0x7A 0x84 0x18 0xFB 0x1B 0xC6 0xFB 0x08 0x5C 0x3E 0x72 0xDF 0xB2 0x28 0x77 0x1B 0x92 0x3D 0x57 0x38 0xDC 0x5B 0x20 0x79 0x72 0x27 0x96 0x2E 0x82 0x72 0xD1 0x31 0x98 0x79 0x91 0x4F 0xBD 0x9B 0x07 0x52 0xFF 0x54 0xE1 0xF6 0x0B 0x26 0x77 0x66 0x43 0x1D 0x25 0xEB 0xC1 0x91 0x74 0x64 0x64 0xCF 0xA6 0x42 0x70 0x5E 0x24 0x82 0xAE 0x97 0x39 0xF5 0xED 0x9F 0x5D 0xF5 0xF7 0x8E 0x1F 0xC8 0x39 0x57 0xFB 0x54 0xA1 0x06 0x4B 0x2C 0x2F 0x35 0x2E 0x2F 0xF6 0xD9 0x79 0x42 0x28 0xCE 0x15 0x27 0x25 0x58 0xCF 0xB8 0x56 0x59 0x91 0xC3 0xBF 0xCA 0x02 0x9C 0x4B 0xEF 0x25 0x2C 0x62 0x72 0x67]))
(deftest test-test-7
  (let [packet (packet/parse-packet test-7-packet)]
    (testing "test-7"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 11))
      (is (= (:dest-id packet) 207))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 24)))
      (is (= (:port packet) false))
      (is (= (:data-len packet) 119)))))





(def test-8-packet (byte-array [0x9C 0xF2 0x02 0x0C 0xBE 0x0E 0xD7 0x7D 0xBA 0xE6 0xCD 0xCE 0x9D 0xF6 0x5E 0xAD 0x26 0x7C 0x6B 0xE3 0x44 0xCF 0x52 0x3B 0xDC 0x75 0xBC 0x7E 0x56 0xE0 0x82 0x1B 0x98 0x38 0x1B 0x76 0xF9 0xDB 0x51 0x3C 0xA0 0xE5 0x61 0xA6 0x6E 0xAD 0x3F 0xB4 0xED 0xB2 0xCE 0xC3 0x83 0x61 0x4D 0x5C 0x16 0x3A 0xD3 0xA5 0x1C 0x2F 0xB4 0xFC 0x44 0x0E 0x64 0xE1 0x56 0x79 0x43 0x96 0xC1 0x51 0xB5 0xFB 0x47 0x13 0x60 0x4F 0x1F 0x6F 0xCA 0x01 0x44 0x1F 0x7C 0x80 0xBA 0x6D 0xC3 0xDD 0x6A 0xCE 0x27 0x79 0x74 0xFF 0x94 0x37 0x5F 0x4F 0xA6 0x98 0x49 0x0E 0xAC 0x08 0x47 0xCF 0x36 0xD3 0x94 0x7A 0x69 0x7C 0xD3 0x9A 0x1A 0x5D 0x04 0x63 0x8F 0x71 0xD3 0xC3 0xB7 0x47 0x78 0x5D 0xAB 0xD6 0x7C 0xEB 0x7B 0x45 0xE8 0x0F 0x19 0x10 0x30 0x67 0x46 0x51 0x47 0xD7 0x59 0xDA 0xEB 0x92 0x58 0xE3 0xF5 0x5E 0xA7 0x4C 0x8A 0x6D 0xE3 0x7E 0xD8 0xAF 0x0D 0x58 0x8C 0xB5 0x69 0x02 0xFC 0xB6 0xD7 0xF1 0x94 0xBA 0x80 0x70 0xAB 0x39 0x4C 0x22 0x81 0x70 0xCF 0x44 0xD2 0x7A 0x85 0x3E 0xC8 0x83 0xF3 0x12 0x75 0xF3 0xAC 0x58 0x94 0x11 0x78 0xC7 0x1C 0x16 0xC0 0xC4 0x89 0x98 0x27 0xD0 0xEF 0xD4 0xD3 0x8A 0x7A 0xE2 0x1B 0x4C 0x4C 0x4D 0xD2 0x29 0x00 0x7D 0x2A 0x56 0x34 0xE5 0xA9 0xAB 0x42 0xD4 0x38 0x03 0x38 0x2F 0x1A 0x73 0x59 0x4F 0x44 0x48 0x63 0xBA 0xEC 0xBA 0x2B 0xA6 0x4D 0x69 0x92 0x94 0x46 0xC4 0x9D 0xE1 0xF8 0x84 0xC0 0x10 0x74 0xAF 0xA0 0xE2 0x44 0x81 0xF7 0x47 0x3C 0x38 0x9D 0xCA 0x94 0xBC 0xC5 0xEE 0x1B 0x6F 0x45 0xC1 0x80 0xC6 0x29 0x52 0x4C 0x2B 0xE3 0x67 0x6E 0x8C 0x59 0x3E 0x51 0x81 0xB5 0x96 0x47 0xDD 0x1F 0x9A 0x76 0x1E 0x24 0x66 0x03 0xAD 0xF3 0xAA 0x5E 0xA5 0x04 0x68 0xBA 0xE5 0x85 0x5E 0xE3 0xA2 0x4E 0xBE 0xC9 0x70 0xC2 0x91 0xED 0x1D 0x22 0x7B 0x25 0xBD 0x61 0x3E 0xD8 0xFE 0xD8 0x51 0x3D 0xC7 0xF3 0x98 0x6B 0x6B 0x35 0x39 0x49 0x18 0xB2 0x93 0x55 0x53 0x83 0x2C 0x71 0xA4 0x42 0x74 0xCD 0xFE 0x8F 0x71 0x19 0x1C 0x94 0x8E 0xF7 0x96 0x21 0xF9 0xC0 0x73 0x16 0xC2 0xED 0xC7 0xF8 0x49 0x58 0x1B 0xF2 0xC5 0xAD 0xF9 0xC4 0x82 0x60 0xC7 0x60 0xE7 0x16 0x2B 0xBF 0x58 0x1D 0xA9 0x23 0xF9 0xCF 0x28 0x1B 0x0D 0xBA 0x07 0x9E 0x36 0xB0 0x11 0xB0 0xB1 0x89 0xB5 0x86 0x92 0x9A 0xF2 0x59 0xF1 0x7F 0x2F 0x03 0xE7 0x8F 0xDC 0xE8 0x81 0x16 0x11 0x64 0xAA 0xF2 0xC1 0x57 0x55 0xBC 0xA9 0x9D 0x70 0x64 0x89 0xDE 0x1F 0xC1 0xA9 0x6D 0xA1 0x55 0xBF 0xC4 0x85 0x2D 0x57 0x69 0x29 0x94 0x8E 0xF5 0x27 0x14 0x42 0x3F 0x00 0x18 0x52 0x4F 0xF8 0xA0 0x96 0xE6 0x92 0xFE 0x6A 0xD1 0x03 0x9F 0x65 0x92 0x3F 0x6F 0xD9 0x0D 0xB2 0xBF 0xEE 0x1F 0x44 0x90 0xFC 0x09 0x73 0xE4 0x53 0xC5 0x0E 0x09 0xC1 0xAC 0x9E 0x77 0x5B 0x99 0xFC 0x5A 0x09 0x34 0xFC 0xB7 0x5C 0x2D 0xD9 0x2B 0xCC 0xAF 0xD2 0xA8 0x04 0x66 0x9D 0xEB 0xB3 0x98 0x1F 0xD9 0xD1 0xC6 0xA0 0x61 0x16]))
(deftest test-test-8
  (let [packet (packet/parse-packet test-8-packet)]
    (testing "test-8"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 14))
      (is (= (:dest-id packet) 156))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 14)))
      (is (= (:port packet) 47846))
      (is (= (:data-len packet) 510)))))





(def test-9-packet (byte-array [0xAE 0xBA 0x59 0x6F 0xE9 0xA6 0xE1 0xBC 0xCC 0x0D 0xF2 0xBA 0x30 0x9A 0x4E 0x7A 0x9E 0x94 0x8B 0x81 0x5C 0xD6 0x4F 0x85 0x69 0xA0 0x1B 0xFB 0x8F 0x22 0xD2 0x48 0x17 0xFA 0xBE 0x0B 0x56 0x89 0x14 0x9D 0x22 0xDA 0x87 0x14 0x48 0xAC 0x76 0x2F 0xC8 0xBF 0x8A 0xA8 0xC4 0x8B 0xC4 0x49 0xC5 0x29 0x27 0x43 0xE6 0x96 0x36 0x6F 0xF4 0x97 0x1C 0x68 0xA0 0x8B 0x4B 0xBC 0x8E 0xA4 0x30 0x08 0x72 0x48 0x53 0x3F 0xDA 0x94 0xB3 0x2F 0x41 0x64 0xF2 0xD3 0xAD]))
(deftest test-test-9
  (let [packet (packet/parse-packet test-9-packet)]
    (testing "test-9"
      (is (= (:packet-crc-ok packet) true))
      (is (= (:header-crc-ok packet) true))
      (is (= (:packet-overhead packet) 13))
      (is (= (:dest-id packet) 174))
      (if
        (:tx-info packet)
        (is (= (:source-id packet) 233)))
      (is (= (:port packet) 48332))
      (is (= (:data-len packet) 76)))))











